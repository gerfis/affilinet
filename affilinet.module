<?php

require_once('affilinet.admin.inc');
require_once('affilinet.api.inc');

function affilinet_print_pre($p,$titel="") {
	if ($titel<>"") {print $titel . ": ";} 
	print "<pre>";
	print_r($p);
	print "</pre>";
}

function affilinet_init() {
    drupal_add_css(drupal_get_path('module', 'affilinet') . '/affilinet.css');

	if (!isset($_COOKIE['affilinet_username_active'])) {
		setcookie('affilinet_username_active', variable_get('affilinet_username_de'), time() + 3600 * 24 * 180, '/', false, false, false);
	}
	if (!isset($_COOKIE['Drupal_visitor_affilinet_username_active'])) {	
		user_cookie_save(array('affilinet_username_active'=>variable_get('affilinet_username_de')));
	}
	if (!isset($_SESSION['Drupal_visitor_affilinet_username_active'])) {	
		$_SESSION['Drupal_visitor_affilinet_username_active'] = variable_get('affilinet_username_de');
	}
}

function affilinet_permission() {
  return array(
    'access affili.net' => array(
      'title' => t('Access affili.net'),
    ),
    'access all affili.net' => array(
      'title' => t('Access ALL affili.net'),
    ),
  );
}

function affilinet_Tests(){
	
	//$tests = _affilinet_GetShopList('Alba',2,2);
	//$tests = affilinet_GetCategoryList(0);
	//affilinet_print_pre($tests);
	
	return "End Tests";

}

function affilinet_menu() {
    $items = array();
	
	    $items['admin/config/services/affilinet'] = array(
        'title' => t('affili.net'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('affilinet_admin_config_form'),  
        'access arguments' => array('administer site configuration'),
        'type' => MENU_CALLBACK,
    );
	
    $items['affilinet/tests'] = array(
        'title' => t('Tests'),
        'access arguments' => array('administer site configuration'),
        'page arguments' => array(0),  
        'page callback' => 'affilinet_Tests',
    );
	
	$items['affilinet/setup'] = array(
        'title' => t('affili.net Setup'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('affilinet_SetCountry_form'),  
        'access arguments' => array('access affili.net'),
        'type' => MENU_CALLBACK,
    );
		
    $items['affilinet/search/programs'] = array(
        'title' => t('Program search'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('affilinet_SearchPrograms_form'),  
        'access arguments' => array('access affili.net'),
    );
	
    $items['affilinet/search/products'] = array(
        'title' => t('Product search'),
        'access arguments' => array('access affili.net'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('affilinet_SearchProducts_form'),
    );		

    $items['affilinet/categories'] = array(
        'title' => t('Program categories'),
        'access arguments' => array('access affili.net'),
        'page arguments' => array(0),  
        'page callback' => 'affilinet_GetProgramCategories',
    );

    $items['affilinet/programsbycategory/%'] = array(
        'title' => t('Program list by category'),
        'access arguments' => array('access affili.net'),
        'page arguments' => array(2),  
        'page callback' => 'affilinet_GetProgramListByCategory',
    );
		
    $items['affilinet/programsbycategory/%/%'] = array(
        'title' => t('Program list by category'),
        'access arguments' => array('access affili.net'),
        'page arguments' => array(2,3),  
        'page callback' => 'affilinet_GetProgramListByCategory',
    );
	
    $items['affilinet/shoplist/%'] = array(
        'title' => t('Shop list'),
        'access arguments' => array('access affili.net'),
        'page arguments' => array(2),  
        'page callback' => 'affilinet_GetShopList',
    );
	
    $items['affilinet/program/%'] = array(
        'title' => t('Program'),
        'access arguments' => array('access affili.net'),
        'page arguments' => array(2),  
        'page callback' => 'affilinet_GetProgram',
    );
	
    $items['affilinet/messages'] = array(
        'title' => t('Program messages'),
        'access arguments' => array('access affili.net'),
        'page arguments' => array(0),  
        'page callback' => 'affilinet_GetProgramInfoMessages',
    );
	
    $items['affilinet/commissions'] = array(
        'title' => t('Commissions'),
        'access arguments' => array('access affili.net'),
        'page arguments' => array(2),  
        'page callback' => 'affilinet_subId_Statistics',
    );	
	
    $items['affilinet/commissions/%'] = array(
        'title' => t('Commissions'),
        'access arguments' => array('access all affili.net'),
        'page arguments' => array(2),  
        'page callback' => 'affilinet_subId_Statistics',
    );	
	
    $items['affilinet/payments'] = array(
        'title' => t('Payments'),
        'access arguments' => array('access affili.net'),
        'page arguments' => array(0),  
        'page callback' => 'affilinet_GetPayments',
    );		
	
    $items['affilinet/vouchers'] = array(
        'title' => t('Vouchers'),
        'access arguments' => array('access affili.net'),
        'page arguments' => array(2),  
        'page callback' => 'affilinet_SearchVoucherCodes',
    );		
	
    $items['affilinet/vouchers/%'] = array(
        'title' => t('Vouchers'),
        'access arguments' => array('access affili.net'),
        'page arguments' => array(2),  
        'page callback' => 'affilinet_SearchVoucherCodes',
    );	
			
		
	return $items;
}


function affilinet_block_info(){
	$blocks = array();
	$blocks['affilinet_country_change'] = array(
		'info' => t('Affilinet change country'),
		);
	return $blocks;
}

function affilinet_block_view($delta = ''){
	$block = array();
	
	switch ($delta) {
		case 'affilinet_country_change':
			$block['subject'] = 'affili.net change country';
			$block['content'] = drupal_get_form('affilinet_SetCountry_form');
		break;
	}
	return $block;
}


function affilinet_admin_config_form($form,&$form_state) {
			
		$form['username_at'] = array(
		'#type' => 'textfield',
		'#title' => t('Username AT'),
		'#default_value' => variable_get('affilinet_username_at'),
		'#required' => TRUE
		);
		
		$form['username_de'] = array(
		'#type' => 'textfield',
		'#title' => t('Username DE'),
		'#default_value' => variable_get('affilinet_username_de'),
		'#required' => TRUE
		);
						
		$form['password'] = array(
		'#type' => 'textfield',
		'#title' => t('Publisher Password'),
		'#default_value' => variable_get('affilinet_password'),		
		'#required' => TRUE
		);
		
		$form['prodpassword'] = array(
		'#type' => 'textfield',
		'#title' => t('Product Password'),
		'#default_value' => variable_get('affilinet_prodpassword'),		
		'#required' => TRUE
		);
		
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);		
	
	return $form;
}

function affilinet_admin_config_form_submit(&$form_state) {
	variable_set('affilinet_username_at', $form_state['username_at']['#value']);
	variable_set('affilinet_username_de', $form_state['username_de']['#value']);	
		
	variable_set('affilinet_password', $form_state['password']['#value']);
	variable_set('affilinet_prodpassword', $form_state['prodpassword']['#value']);
	
	drupal_set_message(t('Your configuration has been saved.'));
}

function affilinet_SetCountry_form($form, &$form_state) {
	
	// affilinet_print_pre($_COOKIE);
	
	$current = ($_COOKIE['Drupal_visitor_affilinet_username_active'] == variable_get('affilinet_username_at')) ? 'AT' : 'DE';
	
	$form['country'] = array(
		'#title' => t('Select country:'),	
		'#type' => 'radios',
		'#options' => array('AT' => 'Österreich', 'DE' => 'Deutschland'),
		'#default_value' => $current,  
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		'#suffix' => '<div style="clear:both;"><br></div>'
	);	
	
	
	return $form;
}

function affilinet_SetCountry_form_submit(&$form_state) {
	affilinet_SetCountry($form_state['country']['#value']);
	drupal_set_message(t('Country changed to ') . $form_state['country']['#value']);
}

function affilinet_SetCountry($country) {
	switch ($country) {
		case 'AT': //setcookie('affilinet_username_active', variable_get('affilinet_username_at'), time() + 3600 * 24 * 180, '/', false, false, false);
			user_cookie_save(array('affilinet_username_active'=>variable_get('affilinet_username_at')));
			$_SESSION['Drupal_visitor_affilinet_username_active'] = variable_get('affilinet_username_at');
			break;
		case 'DE': //setcookie('affilinet_username_active', variable_get('affilinet_username_de'), time() + 3600 * 24 * 180, '/', false, false, false);
			user_cookie_save(array('affilinet_username_active'=>variable_get('affilinet_username_de')));
			$_SESSION['Drupal_visitor_affilinet_username_active'] = variable_get('affilinet_username_de');
			break;
	}
}

function affilinet_GetPrograms($programIds, $query, $categoryIds, $title, $currentPage = 1) {

	$result = _affilinet_GetPrograms($programIds,$query,$categoryIds,$currentPage);
	
	// affilinet_print_pre($result);
	
	$output = "<h3>" . $result->TotalResults . " " . t('Programs for ') . "'" . $title . "' " .t('found') . ":</h3>";
	
	if ($result->TotalResults == 0) {
		$output .= t('No programs for ') . "'" . $title . "' " . t('found');
	} else if ($result->TotalResults == 1) {
		$ppl_min = "";
		$ppl_max = "";
		$pps_min = "";
		$pps_max = "";
		if (isset($program->CommissionTypes->CommissionTypeDetail)) {		
			if (is_array($result->ProgramCollection->Program->CommissionTypes->CommissionTypeDetail)) {
				foreach ($result->ProgramCollection->Program->CommissionTypes->CommissionTypeDetail as $commission) {
					if ($commission->CommissionTypeEnum == 'Sale') {
						$pps_min = $commission->VolumeMin . '%';
						$pps_max = $commission->VolumeMax . '%';
					}
					if ($commission->CommissionTypeEnum == 'Lead') {
						$ppl_min = $commission->VolumeMin . '&euro;';
						$ppl_max = $commission->VolumeMax . '&euro;';
					}				
				} 
			} else {
				if ($result->ProgramCollection->Program->CommissionTypes->CommissionTypeDetail->CommissionTypeEnum == 'Sale') {
					$pps_min = $result->ProgramCollection->Program->CommissionTypes->CommissionTypeDetail->VolumeMin;
					$pps_max = $result->ProgramCollection->Program->CommissionTypes->CommissionTypeDetail->VolumeMax;
				}
				if ($result->ProgramCollection->Program->CommissionTypes->CommissionTypeDetail->CommissionTypeEnum == 'Lead') {
					$ppl_min = $result->ProgramCollection->Program->CommissionTypes->CommissionTypeDetail->VolumeMin;
					$ppl_max = $result->ProgramCollection->Program->CommissionTypes->CommissionTypeDetail->VolumeMax;
				}				
			}
		}
		$output .= "<table id='affilinet_programs'><tr><th rowspan='2'>" . t('Program') . "</th><th colspan='2'>PPL &euro;</th><th colspan='2'>PPS %</th></tr>";
		$output .= "<tr><th>min</th><th>max</th><th>min</th><th>max</th></tr>";		
		$output .= "<tr><td valign='top'><a href='/affilinet/program/" . $result->ProgramCollection->Program->ProgramId . "'><img align='left' src='" . $result->ProgramCollection->Program->LogoURL . "' ><br>&nbsp;" . $result->ProgramCollection->Program->ProgramTitle . "</a></td><td class='affilinet_tbl_right'>" . $ppl_min . "</td><td class='affilinet_tbl_right'>" . $ppl_max. "</td><td class='affilinet_tbl_right'>" . $pps_min . "</td><td class='affilinet_tbl_right'>". $pps_max . "</td></tr>";
		$output .= "</table>";	 
		$output .= "<p style='font-size:x-small;'>PPL = Pay per Lead<br>PPS = Pay per Sale</p>";

	} else {
		$output .= "<table id='affilinet_programs'><tr><th rowspan='2'>" . t('Program') . "</th><th colspan='2'>PPL &euro;</th><th colspan='2'>PPS %</th></tr>";
		$output .= "<tr><th>min</th><th>max</th><th>min</th><th>max</th></tr>";	
		foreach($result->ProgramCollection->Program as $program) {

		$ppl_min = "";
		$ppl_max = "";
		$pps_min = "";
		$pps_max = "";
		if (isset($program->CommissionTypes->CommissionTypeDetail)) {
			if (is_array($program->CommissionTypes->CommissionTypeDetail)) {
				foreach ($program->CommissionTypes->CommissionTypeDetail as $commission) {
					if ($commission->CommissionTypeEnum == 'Sale') {
						$pps_min = $commission->VolumeMin . '%';
						$pps_max = $commission->VolumeMax . '%';
					}
					if ($commission->CommissionTypeEnum == 'Lead') {
						$ppl_min = $commission->VolumeMin . '&euro;';
						$ppl_max = $commission->VolumeMax . '&euro;';
					}				
				} 
			} else {
				if ($program->CommissionTypes->CommissionTypeDetail->CommissionTypeEnum == 'Sale') {
					$pps_min = $program->CommissionTypes->CommissionTypeDetail->VolumeMin . '%';
					$pps_max = $program->CommissionTypes->CommissionTypeDetail->VolumeMax . '%';
				}
				if ($program->CommissionTypes->CommissionTypeDetail->CommissionTypeEnum == 'Lead') {
					$ppl_min = $program->CommissionTypes->CommissionTypeDetail->VolumeMin . '&euro;';
					$ppl_max = $program->CommissionTypes->CommissionTypeDetail->VolumeMax . '&euro;';
				}				
			}
		}
			$output .= "<tr><td valign='top'><a href='/affilinet/program/" . $program->ProgramId . "'><img align='left' src='" . $program->LogoURL . "' ><br>&nbsp;" . $program->ProgramTitle . "</a></td><td class='affilinet_tbl_right'>" . $ppl_min . "</td><td class='affilinet_tbl_right'>" . $ppl_max . "</td><td class='affilinet_tbl_right'>" . $pps_min . "</td><td class='affilinet_tbl_right'>". $pps_max . "</td></tr>";	  
		}
		$output .= "</table>";	 
		$output .= "<p style='font-size:x-small;'>PPL = Pay per Lead<br>PPS = Pay per Sale</p>";		
	}
	
	return $output; 
}

function affilinet_SearchProducts(&$summary,$query,$sortBy,$sortOrder,$minPrice,$maxPrice,$pageSize,$currentPage,$categories,$filter) {
global $user;

	$result = _affilinet_SearchProducts($query,$sortBy,$sortOrder,$minPrice,$maxPrice,$pageSize,$currentPage,$categories,$filter);
	$summary = $result->ProductsSummary;
	
	// affilinet_print_pre($result->Products->Product);
	// affilinet_print_pre($result);
	
	if ($summary->Records == 0) {
		return "<p>" . t('No more products found.') . "</p>";
	}	

	$output = "<h3>" . t('Results for ') . "'" . $query . "'</h3>";
	
    $header = array(
        array('data' => t('Program Logo'),'field' => 'logo'),
        array('data' => t('Product Image'),'field' => 'image'),
        array('data' => t('Product Title'),'field' => 'title'),
        array('data' => t('Program Rates'),'field' => 'rates'),
      );
	
	$rows = array();
	$categories = array();
	
	if ($summary->TotalRecords) {
		$output .= "<table id='ProductsFound'>";
		$output .= "<tr><th>" . t('Program') . "</th><th>" . t('Image') . "</th><th>" . t('Product') . "</th><th>" . t('Price') . "</th></tr>";
		foreach($result->Products->Product as $product) {
			$categories[] = $product->AffilinetCategoryPath;
			// Create link with subId
			$deeplink_parts = explode('&diurl=', $product->Deeplink1);
			$deeplink = $deeplink_parts[0] . "&subid=" . $user->uid;
			if (isset($deeplink_parts[1])) {$deeplink .= "&diurl=" . $deeplink_parts[1];}
			
			$output .= "<tr><td><a href='/affilinet/program/" . $product->ProgramId . "'><img src='" . $product->Logos->Logo->URL . "'></a></td>";
			$output .= "<td><a target='_blank' href='" . $deeplink . "'><img src='" . $product->Images->ImageCollection->Image->URL . "'></a></td>"; 
			$output .= "<td valign='top'>" . $product->ProductName . "<br><br>" . t('Category') . ": " . $product->AffilinetCategoryPath . "<br>EAN: " . $product->EAN . "</td>";
			$output .= "<td valign='top'>" . $product->PriceInformation->DisplayPrice . "</td></tr>";
		}
		$output .= "</table>";		
		
		foreach ($categories as $category) {
			// $output .= $category . "<br>";
		}
	} else {
		$output .= t('No products found for ') . "'" . $query . "'";
	}
	 
	 return $output;
}


function affilinet_SearchProductsJSON($query){
	$result = _affilinet_SearchProductsJSON($query);

	echo '<pre>';
	   // print_r($result);
	echo '</pre>';

	$output = "";
	 foreach($result["Products"] as $product) {
	  $output .= "<img src='" . $product["Images"][0][0]["URL"]. "'> " . $product["ProductId"] . "&nbsp;" . utf8_decode($product["ProductName"]) . ": " . $product["PriceInformation"]["DisplayPrice"] . "<br/>";
	}	
}


function affilinet_SearchProducts_form($form, &$form_state) {
			
/*
 *
 * http://www.zyxware.com/articles/1829/how-to-programmatically-create-a-form-tree-in-drupal
 * 
 function example_form(&$form_state) {
  foreach ($array_var as $key => $value) {
    $form[example']['form'][$key]['text'] = array(
      '#type' => 'textfield',
      '#default_value' => ,
      '#parents' => array('form', $key, 'text'),
    );
  }
  return $form;
}

function example_form_submit($form, &$form_state) {
  foreach($form_state['form'] AS $key => $value) {
  }
}
 */
 		
// http://passingcuriosity.com/2011/drupal-7-forms-tables/

// http://e9p.net/theming-drupal-7-form-elements-table


 	$list =_affilinet_GetCategoryList(0);
	$categories = $list->CategoryResult->Categories->Category;	
	$parents = array();
	
	foreach ($categories as $a){
		$parents[$a->ParentCategoryId][] = $a;
	}
	
	
	$form['categories']= array(
	'#type' => 'fieldset',
	'#title' => '<b>' . t('Product categories') . '</b>',
	'#tree' => TRUE,
	'#collapsible' => TRUE, 
    '#collapsed' => TRUE, 
	
	);
	
	$form['categories']['table-start'] = array(
  		'#type' => 'item',
  		'#prefix' => '<table id="categoryTable">'
	);

	foreach ($parents[0] as $parent) {
		$form['categories'][$parent->CategoryId] = array('#type'=>'checkbox','#title' => $parent->Title, '#prefix'=>'<tr><td>', '#suffix'=>'</td><td>');
		if (isset($parents[$parent->CategoryId])) {
			foreach($parents[$parent->CategoryId] as $child) {
				$form['categories'][$child->CategoryId] = array('#type'=>'checkbox','#title' => $child->Title);
			}
		}
	}
	
	$form['categories']['table-end'] = array(
  		'#type' => 'item',
  		'#prefix' => '</table>'
	);

	$form['search'] = array(
		'#type' => 'textfield',
		'#title' => t('Searchphrase'),
		'#description' => '<span id="product_search_description">The keyword(s) you want the products to match.<br>The following search operators are supported:<ul><li>AND (both query tokens must be contained in the product, but not necessarily next to one another)</li>
<li>OR (any of the query tokens must be contained in the product)</li>
<li>NOT (e.g. with “ipod AND NOT nano”, you will get products, which match the query “ipod”, but don’t match “nano”)</li>
<li>"" (phrase match: all query tokens inclosed with double quotes must be contained in the found products in that order)</li>
<li>() Parentheses, to group expressions like this: "apple ipod" ((touch OR classic) NOT nano) AND "32 GB"</li></ul></span>',
	);
	
	$form['EAN'] = array(
		'#type' => 'textfield',
		'#title' => t('EAN Code'),
		'#description' => t('Find products with the same EAN code.')
	);	

	$sortBy_options = array('Score' => t('Score'), 'ProductName' => t('Productname'), 'Price' => t('Price'), 'LastImported' => t('Newest'));	
	$form['sortBy'] = array(
		'#type' => 'select',
		'#title' => t('Sort By'),
		'#options' => $sortBy_options,
		'#default_value' => 'Score',
		'#prefix' => '<div id="sortfields">',
	); 
	
	$sortOrder_options = array('ascending' => t('ascending'), 'descending' => t('descending'));	
	$form['sortOrder'] = array(
		'#type' => 'select',
		'#title' => t('Sort order'),
		'#options' => $sortOrder_options,
		'#default_value' => 'descending',
		'#suffix' => '</div><div style="clear:both;"></div>',
	); 
	
	$form['minPrice'] = array(
		'#type' => 'textfield',
		'#title' => t('Minimum Price'),
		'#default_value' => '0',
		'#prefix' => '<div id="pricefields">',
	);	

	$form['maxPrice'] = array(
		'#type' => 'textfield',
		'#title' => t('Maximum Price'),
		'#default_value' => '0',
	);	
		
	$form['pageSize'] = array(
		'#type' => 'textfield',
		'#title' => t('Page Size'),
		'#default_value' => '10',
		'#suffix' => '</div><div style="clear:both;"></div>',
	);	
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('search'),
	);

	$form['options']['reset'] = array(
	  '#type' => 'submit',
	  '#value' => t('Reset'),
	  '#submit' => array('affilinet_SearchProducts_form_reset'),
	);

    // $form_state['storage'] is only set when the form
    // as been submitted (see the _submit() function for
    // more details)
    if(isset($form_state['storage'], $form_state['storage']['search']))
    {
        // The form has been submitted, so we display the submitted
        // value to the user:
		$summary = array();
		
		$filterQuery = array();
		if ($form_state['storage']['EAN'] != "") {
			$filterQuery = array(array('DataField' => 'EAN','FilterValue' => $form_state['storage']['EAN']));
		}
		
        $form['result_display'] = array(
            '#markup' => affilinet_SearchProducts($summary,
	       										$form_state['storage']['search'],
            									  $form_state['storage']['sortBy'],
            									  $form_state['storage']['sortOrder'],
            									  $form_state['storage']['minPrice'],
            									  $form_state['storage']['maxPrice'],
            									  $form_state['storage']['pageSize'],
												  $form_state['storage']['currentPage'],
												  $form_state['storage']['categories'],
												  $filterQuery),
            '#prefix' => '<div>',
            '#suffix' => '</div>',
        );
		
		$form['currentPage'] = array(
			'#type' => 'hidden',
			'#value' => $summary->CurrentPage,
		);
		
		$form['totalPages'] = array(
			'#type' => 'hidden',
			'#value' => $summary->TotalPages,
		);		
		
		$form['totalRecords'] = array(
			'#type' => 'hidden',
			'#value' => $summary->TotalRecords,
		);			

		$form['pager-start'] = array(
			'#markup' => '<div id="pager">'
		);
		
		if ($summary->TotalRecords) {
			if ($summary->CurrentPage > 1) {			
				$form['first'] = array(
					'#type' => 'submit',
					'#value' => '<<',	
					//'#prefix' => '<div id="pager">'	
				);
				
				$form['prev'] = array(
					'#type' => 'submit',
					'#value' => '<',		
				);
			}
					
			$form['pages'] = array(
				'#markup' => "&nbsp;" . $summary->CurrentPage . "/" . $summary->TotalPages . "&nbsp;",
			);
			
			if ($summary->CurrentPage < $summary->TotalPages) {
				$form['next'] = array(
					'#type' => 'submit',
					'#value' => '>',		
				);
			
				$form['last'] = array(
					'#type' => 'submit',
					'#value' => '>>',	
					//'#suffix' => '</div>'	
				);
			}
		$form['pager-end'] = array(
			'#markup' => '</div>'
		);
		
		}
				
    } else {
		$form['currentPage'] = array(
			'#type' => 'hidden',
			'#value' => 1,
		);    	
		$form_state['storage']['currentPage'] = 1;
    }
	
	
    return $form;
    	
}

function affilinet_SearchProducts_form_reset($form, &$form_state) {
  $form_state['rebuild'] = FALSE;
}

function affilinet_SearchProducts_form_validate($form, &$form_state) {
	if ($form_state['values']['search'] == "" && $form_state['values']['EAN'] == "") {
		drupal_set_message(t('Please insert keyword or EAN code!'), 'error');
		form_set_error('search');
		form_set_error('EAN');
	}	
}

function affilinet_SearchProducts_form_submit($form, &$form_state) {
	
	$categories = array();
	foreach ($form_state['values']['categories'] as $key=>$val) {
		if ($val == 1) {$categories[]=$key;}
	}
	
    $form_state['storage']['search'] = $form_state['values']['search'];
	$form_state['storage']['sortBy'] = $form_state['values']['sortBy'];
	$form_state['storage']['sortOrder'] = $form_state['values']['sortOrder'];
	$form_state['storage']['minPrice'] = $form_state['values']['minPrice'];
	$form_state['storage']['maxPrice'] = $form_state['values']['maxPrice'];
	$form_state['storage']['pageSize'] = $form_state['values']['pageSize'];
	$form_state['storage']['EAN'] = $form_state['values']['EAN'];
	$form_state['storage']['categories'] = $categories;
		
	if($form_state['values']['op'] == '<'){
		$form_state['storage']['currentPage'] = $form_state['values']['currentPage'] - 1;
	} else if($form_state['values']['op'] == '<<' || $form_state['values']['op'] == t('search')){
		$form_state['storage']['currentPage'] = 1;
	} else if($form_state['values']['op'] == '>'){
		$form_state['storage']['currentPage'] = $form_state['values']['currentPage'] + 1;		
	} else if($form_state['values']['op'] == '>>'){
		$form_state['storage']['currentPage'] = $form_state['values']['totalPages'];				
	}
	
	// $form_state['storage']['result'] = affilinet_SearchProducts($form_state['values']['search']);
    // Then we set $form_state['rebuild'] to TRUE, so that the values stored in
    // $form_state['storage'] are available in the form definition.
        
    $form_state['rebuild'] = TRUE;
}


function affilinet_SearchPrograms_form($form, &$form_state) {
	
	$form['search'] = array(
		'#type' => 'textfield',
		'#title' => t('Searchphrase'),
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('search'),
	);

    // $form_state['storage'] is only set when the form
    // as been submitted (see the _submit() function for
    // more details)
    if(isset($form_state['storage'], $form_state['storage']['search']))
    {
        $form['result_display'] = array(
            '#markup' => affilinet_GetPrograms('',$form_state['storage']['search'],'',$form_state['storage']['search']),
            '#prefix' => '<div>',
            '#suffix' => '</div>',
        );
    }
    return $form;
    	
}

function affilinet_SearchPrograms_form_submit($form, &$form_state) {
    $form_state['storage']['search'] = $form_state['values']['search'];
    $form_state['rebuild'] = TRUE;
}

function affilinet_GetProgramCategories() {
	
	$result = _affilinet_GetProgramCategories();
	
	// affilinet_print_pre($result);
	
	$output = "<h4><a href='/affilinet/search/programs'>" . t("Search programs HERE ...") . "</a></h4>";
	
	$output .= "<table><tr><th>" . t('Main category') . "</th><th>" . t('Sub category') . "</th></tr>";
	
	if (isset($result->RootCategories->ProgramCategory)) {
		foreach ($result->RootCategories->ProgramCategory as $category) {
			$output .= "<tr><td valign='top'><a href='/affilinet/programsbycategory/" . $category->CategoryId . "/" . str_replace("/", " & ", $category->Name) . "'>" . $category->Name . "</a></td><td>";
			if (isset($category->SubCategories->ProgramCategory)) {
				foreach ($category->SubCategories->ProgramCategory as $subCategory) {
					if (isset($subCategory->Name)){
						$output .= "<div><a href='/affilinet/programsbycategory/" . $subCategory->CategoryId . "/" . str_replace("/", " & ", $subCategory->Name) . "'>" . $subCategory->Name . "</a></div>";
					} 
				}
			}
			$output .= "</td></tr>";
		}
	}
	$output .= "</table>";
	return $output;
}

function affilinet_GetShopList($query) {
	
	$result = _affilinet_GetShopList($query);
	// $result = _affilinet_GetCategoryList(163);
	
	affilinet_print_pre($result);
	
	return "";
}


function affilinet_GetProgramListByCategory($CategoryID,$CategoryName = "") {

	return affilinet_GetPrograms('','',array($CategoryID),$CategoryName); 
}

function affilinet_GetProgram($ProgramId) {
global $user;

	$result = _affilinet_GetPrograms(array($ProgramId), '', '');
	// affilinet_print_pre($result);

	drupal_set_title($result->ProgramCollection->Program->ProgramTitle);
	
	$output = "<div class='Logo'><img src='" . $result->ProgramCollection->Program->LogoURL . "' /></div>";
	if (isset($result->ProgramCollection->Program->ScreenshotURL) && $result->ProgramCollection->Program->ScreenshotURL != '') {
		$output .= "<div class='Screenshot'><img src='" . $result->ProgramCollection->Program->ScreenshotURL . "' /></div>";
	}
	$output .= "<div class='ProgramDescription'>" . $result->ProgramCollection->Program->ProgramDescription . "</div>";
	
	// Provisionen
	$rates = _affilinet_GetProgramRates($ProgramId);
	$output .= "<br><form><fieldset><legend><b>Provisionen</b></legend>";	
	$output .= "<div class='green'>";
	if (count($rates->RateCollection) > 1) {
		foreach ($rates->RateCollection as $rate) {
			$output .= $rate->RateMode . ", " . $rate->RateName . ", " . $rate->RateValue . $rate->Unit . "<br>";
		} 
	} else {
		$output .= $rates->RateCollection->RateMode . ", " . $rates->RateCollection->RateName . ", " . $rates->RateCollection->RateValue . $rates->RateCollection->Unit . "<br>";
	}
	$output .= "</div>";
	$output .= "</fieldset></form>";
	
	// Vouchers
	$codes = affilinet_SearchVoucherCodes(1, $ProgramId);
	$output .= "<form><fieldset><legend><b>Gutscheine & Aktionen</b></legend>";	
	$output .= "<div class='yellow'>";
	$output .= $codes;
	$output .= "</div>";
	$output .= "</fieldset></form>";
	
	// Limitations
	$output .= "<form><fieldset><legend><b>Richtlinien</b></legend>";
	if (($result->ProgramCollection->Program->LimitationsComment <> '')) {
		$output .= "<div class='LimitationsComment pink'>" . $result->ProgramCollection->Program->LimitationsComment . "</div>";
	} else {$output .= t('No Limitations.'); }
	$output .= "</fieldset></form>";

	// Statistiken
	$statistics = _affilinet_GetProgramStatistics(array($ProgramId));  // das interessanteste
	//affilinet_print_pre($statistics);
	$output .= "<form><fieldset><legend><b>Statistiken</b></legend>";	
	if (isset($statistics->ProgramStatisticsRecords->PayPerSaleLeadStatistics->StatisticsRecords->ProgramStatisticsRecord)) {
		$output .= t('Clickthrough: ') . $statistics->ProgramStatisticsRecords->PayPerSaleLeadStatistics->StatisticsRecords->ProgramStatisticsRecord->Clickthrough . "<br>";
		$output .= t('Views: ') . $statistics->ProgramStatisticsRecords->PayPerSaleLeadStatistics->StatisticsRecords->ProgramStatisticsRecord->Views . "<br>";
		$output .= t('Clicks: ') . $statistics->ProgramStatisticsRecords->PayPerSaleLeadStatistics->StatisticsRecords->ProgramStatisticsRecord->Clicks . "<br>";
		$output .= t('Sales: ') . $statistics->ProgramStatisticsRecords->PayPerSaleLeadStatistics->StatisticsRecords->ProgramStatisticsRecord->Sales . "<br>";
		$output .= t('Open Sales: ') . $statistics->ProgramStatisticsRecords->PayPerSaleLeadStatistics->StatisticsRecords->ProgramStatisticsRecord->OpenSales . "<br>";
		$output .= t('Cancelled Sales: ') . $statistics->ProgramStatisticsRecords->PayPerSaleLeadStatistics->StatisticsRecords->ProgramStatisticsRecord->CancelledSales . "<br>";
		$output .= t('Commission: ') . $statistics->ProgramStatisticsRecords->PayPerSaleLeadStatistics->StatisticsRecords->ProgramStatisticsRecord->Commission . "&euro;" . "<br>";
		$output .= t('Open Commission: ') . $statistics->ProgramStatisticsRecords->PayPerSaleLeadStatistics->StatisticsRecords->ProgramStatisticsRecord->OpenCommission . "&euro;";
	} else {
		$output .= t('No statistics available for this program.');
	}
	$output .= "</fieldset></form>";
		
	// Infos
	$output .= "<form><fieldset><legend><b>Programm Infos</b></legend>";
	$output .= "Program ID: " . $ProgramId . "<br>";
	$output .= "Programstatus: " . $result->ProgramCollection->Program->PartnershipStatus;
	$output .= "</fieldset></form>";	
	
	// Creatives
	$creatives = _affilinet_SearchCreatives(array($ProgramId));
	//$creativeCategories = _affilinet_GetCreativeCategories($ProgramId);

	//affilinet_print_pre($creativeCategories);
	//affilinet_print_pre($creatives);
	
	$output .= "<h3>" . t('Banners & Links') . "</h3>";
	

	foreach ($creatives->CreativeCollection->Creative as $banner) {
		if ($banner->CreativeTypeEnum == "Banner") {
			$code = "<a target='_blank' href='http://partners.webmasterplan.com/click.asp?ref=736510&site=" . $ProgramId . "&type=b1&bnb=1&subid=" . $user->uid . "'>";
			$code .= "<img src='" . $banner->BannerStub->BannerURL . "' /></a>"; 
			$code = $banner->IntegrationCode;
			
			// Create link with subId
			$script_parts = explode('&target=', $code);
			$script = $script_parts[0] . '&subid=' . $user->uid;
			if (isset($script_parts[1])) {$script .= '&target=' . $script_parts[1];}
			
			$link_parts = explode('" target', $script);
			$link = $link_parts[0] . '&subid=' . $user->uid;
			if (isset($link_parts[1])) {$link .= '" target' . $link_parts[1];}
			
			$image_parts = explode('" border', $link);
			$image = $image_parts[0] . '&subid=' . $user->uid;
			if (isset($image_parts[1])) {$image .= '" border' . $image_parts[1];}
			
			$code = $image;										
			
			$href1=substr($code,strpos($code, "href")+6);
			$href=substr($href1,0,strpos($href1, " target")-1);
			
			$output .= "<div><br><b>" . $banner->Title . "</b><br>" . $code . "</div>";
			$output .= "<div>Link:<br><textarea rows='1' cols='100'>" . $href . "</textarea></div>";
			$output .= "<div>Banner:<br><textarea rows='5' cols='100'>" . $code . "</textarea></div><hr>";		
		}
	}

	// Statistics
	//$statistics = _affilinet_GetDailyStatistics($ProgramId);
	//$statistics = _affilinet_GetPublisherStatisticsPerClick($ProgramId);
	//$statistics = _affilinet_GetPublisherClicksSummary($ProgramId,$user->uid);
	//$statistics = _affilinet_GetClicksBySubIdPerDay($ProgramId);
	
	//affilinet_print_pre($statistics);

	return $output;
}

function table_sort_test() {
$rows=array();
  foreach($values as $val){
    $rows[]=array('data'=>array(
      'id'=>$val->id,
      'title'=>$val->title,
      'price'=>$val->field_price['und'][0]['value'],
      'model'=>$val->field_model['und'][0]['value'],
      'color'=>$val->field_color['und'][0]['value'],
      'speed'=>$val->field_speed['und'][0]['value'],

    ));
  }


  // We are going to output the results in a table with a nice header.
  $header = array(
    // The header gives the table the information it needs in order to make
    // the query calls for ordering. TableSort uses the field information
    // to know what database column to sort by.
    array('data' => t('Entity Id'),'field' => 'id'),
    array('data' => t('Title'),'field' => 'title'),
    array('data' => t('Price'),'field' => 'price'),
    array('data' => t('Model'),'field'=>'model'),
    array('data' => t('Color'),'field'=>'color'),
    array('data' => t('Speed'),'field'=>'speed'),

  );

  $order = tablesort_get_order($header);
  $sort = tablesort_get_sort($header);
  $sql=$order['sql'];
  if($sort=='desc') {

    usort($rows, function($a, $b) use($sql) {
    return $a['data'][$sql] > $b['data'][$sql]? -1 : 1;

  });

  }
  if($sort=='asc') {
      usort($rows, function($a, $b) use ($sql) {
        return $a['data'][$sql] < $b['data'][$sql]? -1 : 1;
      });
  }

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));

  return $output;	
}


function affilinet_GetProgramInfoMessages() {
	$messages = _affilinet_GetProgramInfoMessages();

	// affilinet_print_pre($messages);	
	
	drupal_add_css('http://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css');
	drupal_add_js('http://code.jquery.com/jquery-1.10.2.js');
	drupal_add_js('http://code.jquery.com/ui/1.11.4/jquery-ui.js');
	drupal_add_js('$(function() {$( "#accordion" ).accordion({header:"h4", heightStyle: "content"});});', array('type' => 'inline'));
	
	$output = "<div id='accordion'>";
	foreach ($messages->ArrayOfMessage->Messages->Message as $message) {
		$output .= "<h4>" . $message->Subject . "</h4>"; 
		$output .= "<div><br><b>" . format_date(strtotime($message->MessageDate), 'custom', 'l j. F Y') . "</b><br><br><a href='/affilinet/program/" . $message->ProgramId . "'><img src='" . $message->LogoUrl . "'></a><p>" . $message->Body . "</p></div>";
	}
	$output .= "</div>";

	return $output;
}

function affilinet_subId_Statistics($uid) {
global $user;

	if($uid=='') {
		$uid = $user->uid;
	}
	
	//$payments = _affilinet_GetPayments();
	//affilinet_print_pre($payments);
		
	//$transactions = _affilinet_GetTransactions(11757,$uid);
	//affilinet_print_pre($transactions);

	//$DailyStatistics = _affilinet_GetDailyStatistics(0,$uid,14);
	$SalesLeadsStatistics = _affilinet_GetSalesLeadsStatistics(array(),$uid);
	$SubIdStatistics = _affilinet_GetSubIdStatistics($uid);
	// affilinet_print_pre($SubIdStatistics);
	
	if ($SalesLeadsStatistics->SalesLeadsStatisticsRecords->TotalConfirmed == '0' && $SalesLeadsStatistics->SalesLeadsStatisticsRecords->TotalOpen == '0' && $SalesLeadsStatistics->SalesLeadsStatisticsRecords->TotalCancelled == '0') {
			return t('No commissions available!');
	}
	
	$header = array(
		array('data' => t('Date'),'field' => 'date'),
		array('data' => t('Program'),'field' => 'program'),
		array('data' => t('Price'),'field' => 'price'),
		array('data' => t('Commission'),'field' => 'commission'),
		array('data' => t('Confirmed'),'field' => 'confirmed'),
		array('data' => t('Status'),'field'=>'status'),
	);
	
	$rows = array();	
	foreach ($SubIdStatistics->SubIdStatisticsRecords->Records->SubIdStatisticsRecord as $val) {
    $rows[]=array('data'=>array(
      'date'=> format_date(strtotime($val->Date), 'custom', 'j. F Y'),
      'program'=>$val->ProgramTitle,
      'price'=> array('data' => $val->Price . '&euro;', 'class' => 'affilinet_tbl_right'),
      'commission'=> array('data' => $val->Commission . '&euro;', 'class' => 'affilinet_tbl_right'),
      'confirmed'=> array('data' => $val->Confirmed . '&euro;', 'class' => 'affilinet_tbl_right'),
      'status' => array('data' => $val->TransactionStatus, 'class' => 'affilinet_tbl_right affilinet_status_' . $val->TransactionStatus),
    ));
	}

	$output = "<h3>" . t('Commissions') . "</h3>";
	$output .= "<table>";
	$output .= "<tr><td width='200px'>" . t('Total bought: ') . "</td><td  class='affilinet_tbl_right' width='30px'>" . $SubIdStatistics->SubIdStatisticsRecords->TotalPrice . "&euro;</td></tr>";
	$output .= "<tr><td width='200px'>" . t('Commision confirmed: ') . "</td><td  class='affilinet_tbl_right' width='30px'>" . $SalesLeadsStatistics->SalesLeadsStatisticsRecords->TotalConfirmed . "&euro;</td></tr>";	
	$output .= "<tr><td>" . t('Commision open: ')  . "</td><td class='affilinet_tbl_right'>" . $SalesLeadsStatistics->SalesLeadsStatisticsRecords->TotalOpen . "&euro;</td></tr>";
	$output .= "<tr><td>" . t('Commision cancelled: ')  . "</td><td class='affilinet_tbl_right'>" . $SalesLeadsStatistics->SalesLeadsStatisticsRecords->TotalCancelled . "&euro;</td></tr>";
	$output .= "</table>";
	$output .= "<p>&nbsp;</p>";

	$output .= theme('table', array(
		'header' => $header,
		'rows' => $rows,
	));
	
	return $output;
}

function affilinet_GetPayments() {
	$result = _affilinet_GetPayments();
	affilinet_print_pre($result);
	
	return "";
}

function affilinet_SearchVoucherCodes($currentPage = 1, $programId = ''){
global $user;	
	if ($currentPage == 0) {$currentPage = 1;}
	$codes=_affilinet_SearchVoucherCodes($currentPage, $programId);
	// affilinet_print_pre($codes, "Codes: ");
	
	if (!isset($codes->VoucherCodeCollection->VoucherCodeItem)) {
		return t('No vouchers available.');
	} 
	
	$output = "<table>";
	$output .= "<tr><th>" . t('Program') . "</th><th>" . t('Title') . "</th><th>" . t('Date') . "</th><th>" . t('Code') . "</th><th>" . t('Link') . "</th></tr>";
	
	if (is_array($codes->VoucherCodeCollection->VoucherCodeItem)) {
		$programs = array();
		foreach ($codes->VoucherCodeCollection->VoucherCodeItem as $val) {
			if (!isset($programs[$val->ProgramId])) {
				$program = _affilinet_GetPrograms(array($val->ProgramId), '', '');
				$programs[$val->ProgramId] = $program->ProgramCollection->Program->LogoURL;
			}
			
			$pos = strpos($val->IntegrationCode, '">');
			$link = substr($val->IntegrationCode, 0, $pos) . '&subid=' . $user->uid . '">' . substr($val->IntegrationCode,$pos+4);
			$link = '<a target="_blank" ' . substr($link, 3);
			$link = str_replace('<br />', '', $link);
			
			$output .= "<tr><td><a href='/affilinet/program/" . $val->ProgramId . "'><img src='" . $programs[$val->ProgramId] . "' ></a></td>";
			$output .= "<td><b>" . $val->Title . "</b></td><td>" . format_date(strtotime($val->StartDate), 'custom', 'j.m.Y') . " -<br>" . format_date(strtotime($val->EndDate), 'custom', 'j.m.Y') . "</td><td><b>" . $val->Code . "</b></td>";
			$output .= "<td>" . $link . "</td></tr>";
			$output .= "<tr><td colspan='4'>" . $val->Description . "</td><td><textarea>" . $link . "</textarea></td></tr>";
			$output .= "<tr><td colspan='5'></td></tr>";
		}
	} else {
		$val = $codes->VoucherCodeCollection->VoucherCodeItem;
		if (!isset($programs[$val->ProgramId])) {
			$program = _affilinet_GetPrograms(array($val->ProgramId), '', '');
			$programs[$val->ProgramId] = $program->ProgramCollection->Program->LogoURL;
		}
		
		$pos = strpos($val->IntegrationCode, '">');
		$link = substr($val->IntegrationCode, 0, $pos) . '&subid=' . $user->uid . '">' . substr($val->IntegrationCode,$pos+4);
		$link = '<a target="_blank" ' . substr($link, 3);
		$link = str_replace('<br />', '', $link);
		
		$output .= "<tr><td><a href='/affilinet/program/" . $val->ProgramId . "'><img src='" . $programs[$val->ProgramId] . "' ></a></td>";
		$output .= "<td><b>" . $val->Title . "</b></td><td>" . format_date(strtotime($val->StartDate), 'custom', 'j.m.Y') . " -<br>" . format_date(strtotime($val->EndDate), 'custom', 'j.m.Y') . "</td><td><b>" . $val->Code . "</b></td>";
		$output .= "<td>" . $link . "</td></tr>";
		$output .= "<tr><td colspan='4'>" . $val->Description . "</td><td><textarea>" . $link . "</textarea></td></tr>";
		$output .= "<tr><td colspan='5'></td></tr>";	
	}
	$output .= "</table>"; 
	
	$prev = intval($currentPage) - 1;
	$next = intval($currentPage) + 1;
	$total = intval($codes->TotalResults / 25) + 1;
	
	if ($programId == '') { // pager nicht auf Programmseite anzeigen
		$output .= "<div>";
		if ($currentPage > 1) {
			$output .= "<a class='form-submit art-button' href='/affilinet/vouchers/1'>&lt;&lt</a>&nbsp;";
			$output .= "<a class='form-submit art-button' href='/affilinet/vouchers/$prev'><</a>&nbsp;";
			}
		$output .= $currentPage . "/" . $total . "&nbsp;"; 
		if ($currentPage < $total) {
			$output .= "<a class='form-submit art-button' href='/affilinet/vouchers/$next'>></a>&nbsp;";
			$output .= "<a class='form-submit art-button' href='/affilinet/vouchers/$total'>&gt;&gt;</a>";
		}
		$output .= "</div>";
	}
	return $output;
}

function affilinet_GetCategoryList($shopId){
	$list =_affilinet_GetCategoryList($shopId);
	// affilinet_print_pre($list);
	
	$categories = $list->CategoryResult->Categories->Category;	
	$parents = array();
	
	foreach ($categories as $a){
		$parents[$a->ParentCategoryId][] = $a;
	}
	
//	affilinet_print_pre($parents, "Parents");
	
	$output = "<table>";
	foreach ($parents[0] as $parent) {
		$output .= "<tr><td>" . $parent->Title . "</td><td>";
		if (isset($parents[$parent->CategoryId])) {
			foreach($parents[$parent->CategoryId] as $child) {
				$output .= $child->Title . "<br>";
			}
		}
		$output .= "</td></tr>";
	}
	$output .= "</table>";

	
	return $output;
}
